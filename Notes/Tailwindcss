Use Tailwind's @apply directive to extract repeated utility patterns into custom CSS classes just by copying and pasting the list of class names.

Uses:  1)You aren’t wasting energy inventing class names.    2)Your CSS stops growing(No need to write big css files).   3)Making changes feels safer:If we want to change anything we know
   exactly what to change and where to change without messing up everything like in traditional CSS

Why not just use inline styles?

   A common reaction to this approach is wondering, “Isn’t this just inline styles?” and in some ways it is — you’re applying styles directly to elements instead of 
assigning them a class name and then styling that class.

But using utility classes has a few important advantages over inline styles:

    1)Responsive design. You can’t use media queries in inline styles, but you can use Tailwind’s responsive utilities to build fully responsive interfaces easily.
     2)Hover, focus, and other states. Inline styles can’t target states like hover or focus, but Tailwind’s state variants make it easy to style those states with utility classes.

===>className='invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500'

==>When you need to style an element based on the state of some parent element, mark the parent with the group class, and use group-* modifiers like group-hover to style the target element:


Use unprefixed utilities to target mobile, and override them at larger breakpoints
we can customize breakpoints in  the tailwind.config.js file:



====>Can write tailwind in a better way

1=> w-24 h-24 : size-24
2=> border-b-8 :divide-y-8 (add border b/w every single item)
3=> space between elements without grid or flex=>space-y-8
4=>if more text like paragraphs then we can use "line-clamp-3"  or "truncate"(single line)
5=>Gradient
      "h-48 bw-full bg-gradient-to-r  from-red-500 to-black via white from-20% via-70% to 90% "

6=>ring=>allows u to use box shadows to add a different ring around ur element very similar to outline focus

7=>sr-only: it hides the text normally it allows shows who are using screen readers
