1)What is the diff b/w map and forEach?
    ans)->both are array functions  to loop through the  array items
    1)map in result rens a new array but for Each doesn't return anything in turn  modifies the original array
    2)we can chain things on map like(map()=>{}.filter())...
     but as forEach doesn't return any thing we can't  chain other methods

2)Diff b/w null and undefined?
    null is the actual value but undefined is the variable which is declared but not initialized

    type of null-object typeof undefined -undefined
    console.log(null==undefined)  ===>true
console.log(null===undefined)    ===>false

3)EventDelegation
    without adding event to each list item we add it to the parent add we'll use it to the childrens

4)Var , let , const diff
 ans)=>1)scope   var(function scope or global) let,const(block)
       2)declaration  var can be re declared but let and consts are not


5)What is a pipe JavaScript?

   A pipe is a function that allows us to pass the output of a function as the input of another. (left=>right)

6)Closures==> functions with their outer most environment bundled together
   uses;)1=>modle pattern;function currying ; used in functions like memoize() and once() ; data hiding and encapsulation

function counter(){
    var count=0
    return function incrementCount(){
           count++
           console.log(count)        //1 (1 time func called)
    }
  }

  var counter1=counter()
  counter1()

POLYFILL FOR FLAT METHOD IN JAVASCRIPT

//1ST WAY

flatar=[1,2,4,6,3,[4,1,[5,10],[12,18]]]
function myFlat(ar,depth=1){
    // we need to loop through array elems if it is an array we will recursively 
    // call the method ele push the result
    const op=[]
 ar.forEach((e)=>{
      if(Array.isArray(e) && depth>0){
        op.push(...myFlat(e,depth-1))
      }
    else{
        op.push(e)
    }
  }  )
  return op

}
console.log(myFlat(flatar,2))

//2ND WAY:==>

                                const ar=[1,2,3,[4,5,[6,7]],[8,9]]
                                Array.prototype.myFlat=function(d=1){
                                    const op=[]
                                    if(!Array.isArray(this)){
                                        throw new Error(`${this}.flat is not a function`)
                                    }
                                    this.forEach(ele=>{
                                        if( Array.isArray(ele) && d>0)
                                        {
                                            op.push(...ele.myFlat(d-1))
                                        }
                                    else{
                                        op.push(ele)
                                       
                                    }
                                    
                                })
                                        return op  
                                }
                                console.log("op",ar.myFlat(2))

//POLYFILL FOR POP

const arr=[1,2,3,4,6,7]
Array.prototype.myPop=function(){
    // remove last elem from ar and make length -1 of original length
    if(this.length===0){
        return "undefined"
    }
    console.log(this.length)
    const poppedele=this[this.length-1]
    this.length=this.length-1

    return poppedele
}
arr.myPop()
arr.myPop()
// console.log(arr)  1,2,3,4

//POLYFILL JOIN
const countries=["IN","PK","US","UK"]
Array.prototype.myJoin=function(sep=','){
        // if elem is not the last elem then add seperator
        let res=''
        for(let i=0;i<this.length;i++){
            res+=this[i]
            if(i!==this.length-1){
                res+=sep
            }
        }
        return res
}
console.log(countries.myJoin(' | '))

//POLYFILL PUSH
const ar=[1,2,3,4]
Array.prototype.myPush=function(...elems){
    //    loop through elems and add at the end
    // push return new length
        for(ele of elems){
            this[this.length]=ele
            
        }
        return this.length
}
console.log(ar.push(7,5,'pop',{a:"sr"}))

//INFINITE CURRYING
function add(a){
    return function(b){
        if(b){
            return add(a+b)
        }
        else return a
    }
    // return(b)=>b?add(a+b):a
}
console.log(add(5)(7)(6)(4)())

//MAP,FILTER POLYFILL

const arr=[1,5,8,4]
//map returns new array
Array.prototype.myPolyfill=function(hfn){
    const res=[]
    for(let i=0;i<this.length;i++){
                            //MAP LOGIC
                                res.push(hfn(this[i]))
        if(hfn(this[i]))
          res.push(this[i])
    }
        return res
}
const op=arr.myPolyfill((x)=>x>=5)
console.log(op)
